---
title: "cool stuff from tidytuesdayR"
author:
  - name: Jen Richmond
    url: https://jenrichmond.github.io/
date: 2025-05-16
format: html
editor: source
image: featured.png
---

Have you tried #TidyTuesday? It is a weekly data challenge where the team from the Data Science Learning Community curate and post a dataset to their github repository, then data nerds from all over the world have a go at making a cool visualisation with it and everyone shares what they came up with on social media via the hashtag #tidytuesday. 

Data organising within the #rstats community takes work; TidyTuesday doesn't just happen. Ted Laderas has [talked a lot about burnout](https://laderast.github.io/meetup_burnout/) among organisers. It is common in volunteer settings for 20% of the people to do 80% of the work, but this can lead to unsustainable communities. Ted points to importance of expanding your core group of organisers and making it easy for people to contribute, as ways to make a data initiative work better for everyone; many hands make light work. 

Recently the Jon Harmon and the #tidytuesday team have put this philosophy into action by creating some functions within the `tidytuesdayR` package that make it easy to curate and contribute a dataset to the challenge. 

# How to use `tidytuesdayR` as a participant

The package has a number of functions that make it super easy for you get the data into RStudio. No need to download the csv and read it back in. Just use the `tt_load()` with the date or year and week. 

```{r}
#| code-fold: true

library(tidyverse)
# install.packages("tidytuesdayR")
library(tidytuesdayR)

tues_data <- tidytuesdayR::tt_load("2025-04-29") 

# OR use year and week
# tues_data <- tidytuesdayR::tt_load(2025, week = 17) 


```

Your tues_data object will be a list that will sometimes contain more than one table so using `str()` will give you an idea of which dataframe might be of interest. 

```{r}
str(tues_data)
```

In this case the data is about the userR2025 conference schedule.  We can pull out the dataframe from the list using `list$dataframe` to get started. 

```{r}
user25 <- tues_data$user2025

glimpse(user25)

```



# How to use `tidytuesdayR` as a contributor

Do you have an idea of a dataset that might be of interest to other tidytuesdayers? Great! The new functions in `tidytuesdayR` make it super easy to contribute a dataset. 

All you have to do is follow [these instructions](https://dslc-io.github.io/tidytuesdayR/articles/curating.html). 

Here are some notes I made for myself while I was curating the week 20 water quality dataset. Make sure you have the `tidytuesdayR` installed and loaded, and a github account sorted before you begin. 

### Step 1: write a cleaning script 

This function opens a cleaning.R script that you can use to write the code you need to get your data file from its raw state into a state that other people can use. 

```{r eval=FALSE}
tt_clean()
```

### Step 2: save your clean data to .csv

Once you have written your cleaning.R script and checked that it produces clean dataframes, you can save your datafile. This function will save your dataframes as .csv in your submission folder. It will also open a .md file with a table that you can complete that describes each of the variables in your dataset. 

```{r eval=FALSE}

tt_save_dataset(nameofyourdf)

```

### Step 3: introduce your data

This function opens another .md file that you can use to write an introduction to your dataset. You can describe the data, where it comes from and suggest some questions that people might like to explore. You also want to think about an image that can go along with the data. 

```{r eval=FALSE}

tt_intro()

```

### Step 4: meta data

This bit was cool: this function walks you through a question and answer session, filling in all the details needed for the meta data. Once you are done answering the questions, it creates a meta.yaml file. 
```{r eval=FALSE}

tt_meta()

```

### Step 5: submit

This bit creates a pull request (i.e. a request that the tidytuesday team pull in your curated dataset to their repo). Make sure you have a github account sorted before embarking on this last step. 

```{r eval=FALSE}

tt_submit()

```

### DONE!