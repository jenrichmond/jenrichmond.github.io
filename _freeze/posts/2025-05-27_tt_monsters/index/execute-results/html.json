{
  "hash": "9e47d2b58680d35dc6fb3e89fdc57787",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"dungeons and dragons monsters\"\nsubtitle: \"Tidy Tuesday Week 21\"\ndate: today\nauthor: Jen Richmond\nformat: html\nimage: featured.png\n---\n\n\nThis week for TidyTuesday I decided to look at dragons and practice writing a ggplot function that makes it easy to create the same plot for each level of a variable. In this case, I wanted a function that would spit me out a boxplot comparing the different dragon types on each of the key measures (strength, intelligence, wisdom, charisma, dexerity, and constitution). \n\n# load packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidytuesdayR)\nlibrary(janitor)\nlibrary(ggeasy)\nlibrary(patchwork)\nlibrary(Hmisc) # for %nin%\n\n# adjust year/week values here\nyear = 2025\nweek = 21\n```\n:::\n\n\n# get the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntt <- tt_load(year, week)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n---- Compiling #TidyTuesday Information for 2025-05-27 ----\n--- There is 1 file available ---\n\n\n── Downloading files ───────────────────────────────────────────────────────────\n\n  1 of 1: \"monsters.csv\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndf <- tt[[1]]\n\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 33\n  name    category    cr size  type  descriptive_tags alignment    ac initiative\n  <chr>   <chr>    <dbl> <chr> <chr> <chr>            <chr>     <dbl>      <dbl>\n1 Aboleth Aboleth  10    Large Aber… <NA>             Lawful E…    17          7\n2 Air El… Air Ele…  5    Large Elem… <NA>             Neutral      15          5\n3 Animat… Animate…  1    Medi… Cons… <NA>             Unaligned    18          2\n4 Animat… Animate…  0.25 Small Cons… <NA>             Unaligned    17          4\n5 Animat… Animate…  2    Large Cons… <NA>             Unaligned    12          4\n6 Ankheg  Ankheg    2    Large Mons… <NA>             Unaligned    14          0\n# ℹ 24 more variables: hp <chr>, hp_number <dbl>, speed <chr>,\n#   speed_base_number <dbl>, str <dbl>, dex <dbl>, con <dbl>, int <dbl>,\n#   wis <dbl>, cha <dbl>, str_save <dbl>, dex_save <dbl>, con_save <dbl>,\n#   int_save <dbl>, wis_save <dbl>, cha_save <dbl>, skills <chr>,\n#   resistances <chr>, vulnerabilities <chr>, immunities <chr>, gear <chr>,\n#   senses <chr>, languages <chr>, full_text <chr>\n```\n\n\n:::\n:::\n\n\n# make a plot theme\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot theme\n\ntheme_dragons <- function() { \n  \n  theme_minimal() %+replace%\n    theme(\n    plot.title = element_text(size = 16, hjust = 0.05, \n                              colour = \"black\",  \n                              margin = margin(b = 5)),\n    plot.subtitle = element_text(size = 12, hjust = 0.05, \n                                 colour = \"black\",  \n                                 margin = margin(b = 5)),\n    plot.title.position = \"plot\",  # Position at the \"plot\" level rather than \"panel\"\n    panel.background = element_rect(fill = \"ghostwhite\", color = NA),\n    plot.background = element_rect(fill = \"ghostwhite\", color = NA),\n    plot.margin = margin(t = 20, r = 20, b = 20, l = 20, unit = \"pt\")\n    \n      )\n    \n}\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set the custom theme to apply to all plots in this document \n\ntheme_set(theme_dragons())\n```\n:::\n\n\n\n# wrangling\n\nHere I am deciding to look at dragons. I need to filter out dragon types that only have a single row in the data. I am making the data long and adding a new column that is the mean_score on each of the variables for each dragon type (to allow for ordering later on). \n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  tabyl(type) %>%\n  arrange(-n) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        type  n    percent\n       Beast 84 0.25454545\n      Dragon 45 0.13636364\n Monstrosity 37 0.11212121\n       Fiend 29 0.08787879\n    Humanoid 26 0.07878788\n      Undead 18 0.05454545\n```\n\n\n:::\n\n```{.r .cell-code}\ndragons <- df %>%\n  filter(type == \"Dragon\") %>%\n  select(name, category, type, str:cha) \n\ndragons %>%\n  tabyl(category) %>%\n   arrange(n) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      category n    percent\n Dragon Turtle 1 0.02222222\n   Half-Dragon 1 0.02222222\n        Kobold 1 0.02222222\n  Pseudodragon 1 0.02222222\n        Wyvern 1 0.02222222\n Black Dragons 4 0.08888889\n```\n\n\n:::\n\n```{.r .cell-code}\nsingle_dragons <- c(\"Dragon Turtle\", \"Half-Dragon\", \"Kobold\", \"Pseudodragon\", \"Wyvern\")\n\ndragons_long <- dragons %>%\n  filter(category %nin% single_dragons) %>%\n  pivot_longer(names_to = \"index\", values_to = \"score\", str:cha) %>%\n  mutate(measure = case_when(index == \"str\" ~ \"Strength\", \n                                  index == \"dex\" ~ \"Dexterity\", \n                                  index == \"con\" ~ \"Constitution\", \n                                  index == \"int\" ~ \"Intelligence\", \n                                  index == \"wis\" ~ \"Wisdom\", \n                                  index == \"cha\" ~ \"Charisma\", \n                                  ))\n\ndragons_long <- dragons_long %>%\n  group_by(category, index) %>%\n  mutate(mean_score = mean(score))\n```\n:::\n\n\n\n# make a plot\n\nI make a basic plot using just the strength scores and work out how to order the boxplots by mean strength scores (see what i learned below for alternative options I played with). \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndragons_long %>% \n  filter(index == \"str\") %>%\n    ggplot(aes(x = reorder(category, mean_score), y = score, fill = category)) +\n    geom_boxplot(alpha = 0.5) +\n    coord_flip() +\n    labs(\n      x = \"Type of dragon\",\n      y = \"Score\",\n      title = \"Dragon Strength Scores\"\n    ) +\n    easy_remove_legend()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n# write a function\n\nNow to turn that code into a function. Here my function takes a dataframe and a value of the variable we are interested in (in this case index). It filters the data for that value, pulls out the value of measure (to use as a subtitle label), then plots the filtered data. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_dragon_index <- function(data, var) {\n  filtered_data <- data %>%\n    filter(index == var) \n  \n  measure <- filtered_data$measure[1]\n  \n  filtered_data %>%\n    ggplot(aes(x = reorder(category, mean_score), y = score, fill = category)) +\n    geom_boxplot(alpha = 0.5) +\n    coord_flip() +\n    labs(\n      x = \"Type of dragon\",\n      y = \"Score\",\n      subtitle = paste(measure, \"Scores\")\n    ) +\n    easy_remove_legend()\n}\n```\n:::\n\n\n# test the function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_dragon_index(dragons_long, \"str\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n# combine plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_dragon_index(dragons_long, \"str\") + plot_dragon_index(dragons_long, \"int\") +\n      plot_annotation(\n             title = \"Characteristics by Dragon Type\",\n              theme = theme(\n      plot.title = element_text(\n        hjust = 0,            # align left\n        size = 16,\n        color = \"black\",\n        margin = margin(b = 5))  # spacing below title\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_dragon_index(dragons_long, \"wis\") + plot_dragon_index(dragons_long, \"cha\") +\n  plot_annotation(\n             title = \"Characteristics by Dragon Type\",\n              theme = theme(\n      plot.title = element_text(\n        hjust = 0,            # align left\n        size = 16,\n        color = \"black\",\n        margin = margin(b = 5))  # spacing below title\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# three things I learned... \n\n\n## 1. theme_set()\n\nYou can make a custom ggplot theme and then automatically use it for all the plots in your Quarto Document using `theme_set()`. In this case, I called my theme `theme_dragons()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_dragons())\n```\n:::\n\n\n\n## 2. plot_annotation\n\nWhen using the `patchwork` package to combine plots you can use `plot_annotation()` to add titles etc to your combined plot. You can also use theme() functions, in much the same way you would for ggplot to control your title, margins or background. See [patchwork vignette](http://patchwork.data-imaginist.com/reference/plot_annotation.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot1 + plot2 +\n    plot_annotation(title = \"My title\",\n              theme = \n                theme(plot.background = element_rect(fill = \"ghostwhite\"),\n                      plot.margin = margin(20, 20, 20, 20),  # T, R, B, L \n                      plot.title = element_text(hjust = 0, # align left\n                                  size = 16,  color = \"black\",  \n                      margin = margin(b = 5))  # spacing below title\n    )\n  )\n```\n:::\n\n\n\n## 3. how to reorder x axis in ggplot \n\n`coorid_flip()` is handy when you want x axis labels to display more clearly, but it is a bit aanoying that the order L-R gets translated B-T. I played for a little bit working out how to use `fct_rev()` to make the dragons display in alphabetical order from top to bottom, before deciding that ordering the bars by the mean_score would make for a more meaningful plot. Here is the code for each of those options in a panel-tabset. \n\n\n\n::: panel-tabset\n\n### default\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndragons_long %>% \n  filter(index == \"str\") %>%\n    ggplot(aes(x = category, y = score)) +\n   geom_boxplot(fill = \"lavender\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n### coord_flip\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndragons_long %>% \n  filter(index == \"str\") %>%\n    ggplot(aes(x = category, y = score)) +\n   geom_boxplot(fill = \"lavender\")  +\n  coord_flip() \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n### fct_rev\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndragons_long %>% \n  filter(index == \"str\") %>%\n    ggplot(aes(x = fct_rev(category), y = score)) +\n  geom_boxplot(fill = \"lavender\") +\n    coord_flip() \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n### reorder\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndragons_long %>% \n  filter(index == \"str\") %>%\n    ggplot(aes(x = reorder(category,mean_score), y = score)) +\n geom_boxplot(fill = \"lavender\") +    \n  coord_flip() \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}