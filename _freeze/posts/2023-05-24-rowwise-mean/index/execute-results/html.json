{
  "hash": "6b62a8cc6c823d0efca6665e0ed2dde1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: rowwise %>% mean\ndate: '2023-05-24'\nauthor:\n  - name: Jen Richmond\n    url: https://jenrichmond.github.io/\nformat: html\neditor: source\ndraft: FALSE\nimage: featured.jpg\ncategories: \n- data wrangling\n---\n\n\n\nWhen you have data from a survey, the responses for each item are most often listed in different variables. Generally you have to average across the items to get a mean value for that scale for each participant. But dealing with calculations across rows is sometimes difficult in R.\n\n![](featured.jpg){width=\"400\"}\n\nPhoto by <a href=\"https://unsplash.com/@travisessinger?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">Travis Essinger</a> on <a href=\"https://unsplash.com/photos/green-grass-field-oG01mozFb7o?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">Unsplash</a>\n\n### load packages + make some data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n\npID <- c(\"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"p6\")\nitem1 = sample(1:7, 6, replace=T)\nitem2 = sample(1:7, 6, replace=T)\nitem3 = sample(1:7, 6, replace=T)\nitem4 = sample(1:7, 6, replace=T)\nitem5 = sample(1:7, 6, replace=T)\n\nsurvey <- data.frame(pID, item1, item2, item3, item4, item5)\n\nglimpse(survey)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 6\nColumns: 6\n$ pID   <chr> \"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"p6\"\n$ item1 <int> 1, 4, 5, 5, 2, 6\n$ item2 <int> 3, 6, 5, 3, 3, 4\n$ item3 <int> 7, 6, 2, 4, 6, 1\n$ item4 <int> 5, 3, 3, 5, 2, 3\n$ item5 <int> 3, 4, 5, 6, 7, 7\n```\n\n\n:::\n:::\n\n\n\n### base R rowMeans\n\nThe `rowMeans()` function works, but why the x and what do the dots mean??\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_means_base <- survey %>%\n  mutate(item_mean = rowMeans(x = select(.data = . , starts_with(match = \"item\"))))\n```\n:::\n\n\n\n### tidyverse rowwise\n\nThe tidyverse version involves using `rowwise()` to tell R that you would like a mean calculated for each row in the dataset. Use `c()` to tell R which columns to average across.\n\nWithout `rowwise()`, R will calculate the mean of all rows/columns and put that in the new variable. You will end up with the same value for each row.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_means_norowwise <- survey %>%\n  mutate(item_mean = mean(c(item1, item2, item3, item4, item5))) \n\nglimpse(survey_means_norowwise)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 6\nColumns: 7\n$ pID       <chr> \"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"p6\"\n$ item1     <int> 1, 4, 5, 5, 2, 6\n$ item2     <int> 3, 6, 5, 3, 3, 4\n$ item3     <int> 7, 6, 2, 4, 6, 1\n$ item4     <int> 5, 3, 3, 5, 2, 3\n$ item5     <int> 3, 4, 5, 6, 7, 7\n$ item_mean <dbl> 4.2, 4.2, 4.2, 4.2, 4.2, 4.2\n```\n\n\n:::\n:::\n\n\n\nWith `rowwise()`, it calculates across the rows, separately for each participant.\n\n::: callout-note\nIt is important to get into the habit of adding `ungroup()` after a `rowwise()` in the same way as you would after a `group_by()` because the dataframe becomes grouped by row, which can mess with calcuations further down the pipeline.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_means_rowwise <- survey %>%\n  rowwise() %>%\n  mutate(item_mean = mean(c(item1, item2, item3, item4, item5))) %>%\n  ungroup()\n\nglimpse(survey_means_rowwise)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 6\nColumns: 7\n$ pID       <chr> \"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"p6\"\n$ item1     <int> 1, 4, 5, 5, 2, 6\n$ item2     <int> 3, 6, 5, 3, 3, 4\n$ item3     <int> 7, 6, 2, 4, 6, 1\n$ item4     <int> 5, 3, 3, 5, 2, 3\n$ item5     <int> 3, 4, 5, 6, 7, 7\n$ item_mean <dbl> 3.8, 4.6, 4.0, 4.6, 4.0, 4.2\n```\n\n\n:::\n:::\n\n\n\nIf there are a lot of columns to average across, you can avoid typing all of the names using `c_across()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_means_rowwise_across <- survey %>%\n  rowwise() %>%\n  mutate(item_mean = mean(c_across(item1:item5))) %>%\n  ungroup()\n\nglimpse(survey_means_rowwise_across)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 6\nColumns: 7\n$ pID       <chr> \"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"p6\"\n$ item1     <int> 1, 4, 5, 5, 2, 6\n$ item2     <int> 3, 6, 5, 3, 3, 4\n$ item3     <int> 7, 6, 2, 4, 6, 1\n$ item4     <int> 5, 3, 3, 5, 2, 3\n$ item5     <int> 3, 4, 5, 6, 7, 7\n$ item_mean <dbl> 3.8, 4.6, 4.0, 4.6, 4.0, 4.2\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}